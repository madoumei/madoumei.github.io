<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>how install mysql for docker</title>
      <link href="/2021/11/02/how-install-mysql-for-docker/"/>
      <url>/2021/11/02/how-install-mysql-for-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>笔者server系统为ubuntu 18.04 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install curl</span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>执行完命令之后使用命令docker version查看,如果打印docker相关信息则表示安装成功!</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@jay:/usr/local/apps/docker/mysql# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.10</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.16.9</span><br><span class="line"> Git commit:        b485636</span><br><span class="line"> Built:             Mon Oct 25 07:42:57 2021</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.10</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.16.9</span><br><span class="line">  Git commit:       e2f740d</span><br><span class="line">  Built:            Mon Oct 25 07:41:06 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.11</span><br><span class="line">  GitCommit:        5b46e404f6b9f661a205e28d59c982d3634148f8</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.2</span><br><span class="line">  GitCommit:        v1.0.2-0-g52b36a2</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><h2 id="搜索并拉取mysql"><a href="#搜索并拉取mysql" class="headerlink" title="搜索并拉取mysql"></a>搜索并拉取mysql</h2><h3 id="搜索mysql所有版本"><a href="#搜索mysql所有版本" class="headerlink" title="搜索mysql所有版本"></a>搜索mysql所有版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br><span class="line">root@jay:/usr/local/apps/docker/mysql# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11619     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4420      [OK]       </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   860                  [OK]</span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   91                   </span><br><span class="line">mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   89                   </span><br><span class="line">centurylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]</span><br><span class="line">databack/mysql-backup             Back up mysql databases to... anywhere!         51                   </span><br><span class="line">prom/mysqld-exporter                                                              43                   [OK]</span><br><span class="line">deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]</span><br><span class="line">tutum/mysql                       Base docker image to run a MySQL database se…   35                   </span><br></pre></td></tr></table></figure><h3 id="选择版本进行拉取"><a href="#选择版本进行拉取" class="headerlink" title="选择版本进行拉取"></a>选择版本进行拉取</h3><p>选择mysql 5.7进行安装执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>使用命令docker images 列出所有下载的镜像,查看mysql是否拉取成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@jay:/usr/local/apps/docker/mysql# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">mysql        5.7       938b57d64674   2 weeks ago   448MB</span><br></pre></td></tr></table></figure><h2 id="docker运行mysql"><a href="#docker运行mysql" class="headerlink" title="docker运行mysql"></a>docker运行mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v $PWD/conf/:/etc/mysql/conf.d -v $PWD/log:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p>参数解析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-p(port) 3306:3006 前面3306表示本地接口,后面表示映射到容器上面的接口</span><br><span class="line">--name mysql 为容器命名为mysql</span><br><span class="line">-v(volume) 表示挂载目录其中$PWD表示当前目录</span><br><span class="line">-e 初始化mysql中root密码</span><br><span class="line">-d 表示后台启动mysql:5.7镜像</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how use gradle</title>
      <link href="/2021/09/30/how-use-gradle/"/>
      <url>/2021/09/30/how-use-gradle/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章讲的gradle的发展历程,以及优点,那么我们选择了gradle下面是怎么使用.</p><h2 id="安装下载"><a href="#安装下载" class="headerlink" title="安装下载"></a>安装下载</h2><p>悉知笔者使用的系统为debian 10 64位,在下载安装gradle之前需要先下载安装JDK,Gradle需要安装JDK或者JRE版本7或者更高的版本.</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>我安装的是JDK11,JDK版本自行选择</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openjdk-11-jdk</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输出如下表示成功(可能会因为版本问题输出不太一样):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version &quot;11.0.12&quot; 2021-07-20</span><br><span class="line">OpenJDK Runtime Environment (build 11.0.12+7-post-Debian-2deb10u1)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 11.0.12+7-post-Debian-2deb10u1, mixed mode, sharing)</span><br></pre></td></tr></table></figure><h3 id="下载Gradle"><a href="#下载Gradle" class="headerlink" title="下载Gradle"></a>下载Gradle</h3><p>我们可以根据<a href="https://gradle.org/releases/">Gradle官方网站</a>选择下载的版本,在debian中切换到安装的目录,笔者这里使用wget命令下载,且下载目录路径为/usr/local/apps/lear/gradle/pack</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://services.gradle.org/distributions/gradle-6.3-bin.zip</span><br></pre></td></tr></table></figure><p>下载完成后解压文件到当前/usr/local/apps/lear/gradle/pack目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unzip gradle-6.3-bin.zip</span><br></pre></td></tr></table></figure><p>解压命令执行后我们验证是否已经成功提取了Gradle文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l -a gradle-6.3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 23606 Feb  1  1980 LICENSE</span><br><span class="line">-rw-r--r-- 1 root root   803 Feb  1  1980 NOTICE</span><br><span class="line">-rw-r--r-- 1 root root   976 Feb  1  1980 README</span><br><span class="line">drwxr-xr-x 2 root root  4096 Feb  1  1980 bin</span><br><span class="line">drwxr-xr-x 2 root root  4096 Feb  1  1980 init.d</span><br><span class="line">drwxr-xr-x 3 root root  4096 Feb  1  1980 lib</span><br></pre></td></tr></table></figure><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>我们下载已经下载解压好了Gradle但是还不可以使用,使用gradle命令会提示command not found我们需要给gradle配置环境变量,我们在/etc/profile.d/ 目录中创建一个名为gradle.sh的文件.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile.d/gradle.sh</span><br></pre></td></tr></table></figure><p>在编辑页面将配置输入进去:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GRADLE_HOME=/usr/local/apps/lear/gradle/pack/gradle-6.3(gradle的安装路径)</span><br><span class="line">export PATH=$&#123;GRADLE_HOME&#125;/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p>因为使用的是vim编辑器使用:wq!保存退出</p><p>给gradle.sh赋予脚本执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/profile.d/gradle.sh</span><br></pre></td></tr></table></figure><p>使用source设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile.d/gradle.sh</span><br></pre></td></tr></table></figure><h3 id="验证gradle安装"><a href="#验证gradle安装" class="headerlink" title="验证gradle安装"></a>验证gradle安装</h3><p>输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -v</span><br></pre></td></tr></table></figure><p>如果输出:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 6.3</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   2020-03-24 19:52:07 UTC</span><br><span class="line">Revision:     bacd40b727b0130eeac8855ae3f9fd9a0b207c60</span><br><span class="line"></span><br><span class="line">Kotlin:       1.3.70</span><br><span class="line">Groovy:       2.5.10</span><br><span class="line">Ant:          Apache Ant(TM) version 1.10.7 compiled on September 1 2019</span><br><span class="line">JVM:          11.0.12 (Debian 11.0.12+7-post-Debian-2deb10u1)</span><br><span class="line">OS:           Linux 4.19.0-17-cloud-amd64 amd64</span><br></pre></td></tr></table></figure><p>因为版本问题可能输出内容的不一致,但是都差不多.</p><p>这样就在Debian 10上面安装了Gradle</p>]]></content>
      
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>what is gradle</title>
      <link href="/2021/09/30/what-is-gradle/"/>
      <url>/2021/09/30/what-is-gradle/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Gradle"><a href="#什么是Gradle" class="headerlink" title="什么是Gradle"></a>什么是Gradle</h3><p>什么是 Gradle 呢？在 Gradle 官网中是这么介绍的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gradle is an open-source build automation tool focused on flexibility and performance. </span><br><span class="line">Gradle build scripts are written using a Groovy or Kotlin DSL. —官网</span><br></pre></td></tr></table></figure><p>翻译成中文就是，Gradle 是专注于灵活性和性能的开源构建自动化工具。Gradle 构建脚本是使用 Groovy 或 Kotlin DSL 编写的。</p><p>我们看到了这里有个 DSL，下面我们看下什么是 DSL：</p><p>DSL 的全称是 Domain Specific Language，即领域特定语言，或者我们可以翻译成“特定领域的语言”。</p><p>它的特性就是 “ A specialized computer language designed for a specific task.”</p><p>翻译为：为解决某一类任务而专门设计的语言。 再通俗点来说，其实就是这个语言不通用，只能用于特定的某个领域，俗称“小语言”。因此 DSL 也是语言。</p><p>通过上面的介绍，说白了，Gradle 就是一个自动化的项目构建工具，用来帮助我们自动构建项目。</p><h3 id="为什么要使用Gradle"><a href="#为什么要使用Gradle" class="headerlink" title="为什么要使用Gradle"></a>为什么要使用Gradle</h3><p>那么我们为什么要使用 Gradle 呢？</p><h4 id="自动划构建"><a href="#自动划构建" class="headerlink" title="自动划构建"></a>自动划构建</h4><p>我们在写 Java 的时候，如果没有构建工具，我们需要在控制台，通过<code>javac</code>先将 Java 文件编译为 class 文件，然后再用<code>jar</code>命令将 class 文件打包为 jar 包。有了自动化构建工具只需要一个命令或是点一个按钮就可以打出 jar包。</p><h4 id="Gradle-的集各家之所长"><a href="#Gradle-的集各家之所长" class="headerlink" title="Gradle 的集各家之所长"></a>Gradle 的集各家之所长</h4><p>前面说到 Gradle 是一个自动化构建工具，那么我们下面对比一同类构建工具和 Gradle 相比的优缺点。</p><h5 id="Apache-Ant"><a href="#Apache-Ant" class="headerlink" title="Apache Ant"></a><strong>Apache Ant</strong></h5><p><strong>Ant</strong> 全称是<code>Another Neat Tool</code>，它是由 James Duncan Davidson 开发的，最初是用来构建 Tomcat 的。发布于 2000 年，它的核心代码是由 Java 编写的因此具有平台无关性。构建脚本是 XML(build.xml)。在早期用 Eclipse 开发的 Android 的时候，构建工具就是 Ant。它的构建脚本有三个节点 project、target、task。</p><p><strong>但是它有以下缺点：</strong></p><ol><li>无法实时获取运行信息；</li><li>在项目规范上规范性不足，灵活性太高，对 build.xml 没有约定规范；</li><li>XML 作为构建脚本，如果项目构建较为复杂，build.xml 就会很长，难以维护。</li></ol><h5 id="Apache-Maven"><a href="#Apache-Maven" class="headerlink" title="Apache Maven"></a><strong>Apache Maven</strong></h5><p>为了解决开发人员在使用 Ant 时面临的问题，Apache 在 2004 年发布了 Maven。Maven 除了项目构建功能外，还提供了高级项目管理工具。最初在 Jakata Turbine 项目中用来简化构建过程。Maven 和 Ant 针对项目构建的两个不同方面解决问题，Ant 是为 Java 项目提供平台构建任务，而 Maven 本身描述项目的高级方面。</p><p><strong>Maven 同样有以下缺点：</strong></p><ol><li><strong>XML 还是会很长：</strong> 它还是以 XML 作为构建脚本，如果项目复杂，XML 还是会很长，但是较 Ant 比较好维护；</li><li><strong>缺乏灵活性：</strong> 规范性太强，缺乏灵活性，会写很多冗余配置；</li><li><strong>链接仓库不方便：</strong> 链接国外 Maven 仓库不方便，要切换至国内阿里云的 Maven 仓库。</li></ol><p><strong>总而言之：</strong></p><p>Gradle 它是一个构建工具，采用 Groovy 或是 Kotlin 语言编写，汲取了 Ant 和 Maven 的优点，但是相比较于 Ant 和 Maven，Gradle 更加强大，高度可定制，构建更加快速。</p><p>目前我们开发中，Java 项目一般都用 IntelliJ IDEA，它自带的构建工具是 Maven，也可以使用 Ant。Android 项目默认构建工具一般都是使用 Gradle 的，也是 Google 推荐的 Android 构建工具。我觉得后期 Java 也有可能会使用 Gradle 构建工具。因为 Gradle 它集各家之所长，既吸收了 Maven 的规范化和仓库概念，又吸收了 Ant 的 task 思想。</p><h3 id="Gradle的优点"><a href="#Gradle的优点" class="headerlink" title="Gradle的优点"></a>Gradle的优点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accelerate developer productivity</span><br></pre></td></tr></table></figure><p><strong>加快开发人员生产力</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From mobile apps to microservices, from small startups to big enterprises, </span><br><span class="line">Gradle helps teams build, automate and deliver better software, faster.</span><br></pre></td></tr></table></figure><p><strong>从移动应用程序到微服务，从小型初创公司到大型企业，Gradle 可以帮助团队更快地构建，自动化和交付更好的软件。</strong></p><p>Gradle 它汲取了 Ant 和 Maven 的优点，吸收了 Ant 的 task 思想，和 Maven 的规范化和仓库概念。采用 Groovy 或是 Kotlin 语言编写，但是它的<strong>代码量更少，可读性更强</strong>。</p><p><strong>Gradle 具有以下 3 大特性：</strong></p><ul><li><strong>高度可定制:</strong> 它的高度可定制化体现在，它以最基本的方式可定制和可扩展的方式建模；</li><li><strong>快速 :</strong> Gradle 通过重新使用以前执行的输出，仅处理已更改的输入以及并行执行任务来快速完成任务。通俗点就是说，第二次构建，只构建我们修改代码相关的类，不会耗费时间来构建整个项目；</li><li><strong>强大 :</strong> Gradle 是 Android 的官方构建工具，并支持许多流行的语言和技术。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>split target</title>
      <link href="/2021/09/18/split-target/"/>
      <url>/2021/09/18/split-target/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  什么时候拆解任务呢,就是把任务进行缩减,比如说一个长期任务我们可以缩减为一个短期可以轻松完成的.</p><h2 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h2><ul><li>看一本书   —&gt; 看一页书</li><li>写一篇文章 —&gt; 写一句话</li><li>跑10公里   —&gt; 穿上跑鞋</li><li>做100次俯卧撑 —&gt; 做1次俯卧撑</li><li>多吃蔬菜水果 —&gt;  吃一个水果</li><li>编写一个程序  —&gt; 编写一个函数 —&gt; 编写一行代码<br>这样做的目的是使上手变得超级容易,让你先上手再说.一旦开始做了(这可能是最艰难的一步),<br>你就会开始有动力,可能会继续做下去.</li><li>阅读一页 —&gt; 阅读10页 —&gt; 读完第一章</li><li>写一个句子 —&gt; 写文章的开头 —&gt; 写出正文</li><li>穿上跑鞋 —&gt; 步行5分钟 —&gt; 跑步5分钟<br>一旦开始,继续做下去就会容易的多.有时,你甚至会发现,自己在不知不觉间已经完成任务.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learn </tag>
            
            <tag> habit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to install minio for debian and use https.md</title>
      <link href="/2021/09/17/how-to-install-minio-for-debian-and-use-https-md/"/>
      <url>/2021/09/17/how-to-install-minio-for-debian-and-use-https-md/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在debian系统中安装minio并使用https方式访问"><a href="#如何在debian系统中安装minio并使用https方式访问" class="headerlink" title="如何在debian系统中安装minio并使用https方式访问"></a>如何在debian系统中安装minio并使用https方式访问</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  以前搭建过的minio都是使用<a href="http://domain/">http://domain</a> name(ip):port/bucket/image name.xx访问,这种方式正常使用是没有问题的在网站中,但是http的协议的图片在https网站中引用在google Chrome浏览器中会有安全策略问题,https网站不允许调用http协议中的请求,如果想要调用需要在域名地址输入框的小🔒位置点击选择网站设定,在新开的设定页面找到不安全的内容更改为允许,但是这样的话原本的网站https也会降级为http,这样网站就会变的不安全,所以思前想后(因为穷)还是自己搭建一个minio的https服务,下面来食用吧</p><h2 id="下载安装minio"><a href="#下载安装minio" class="headerlink" title="下载安装minio"></a>下载安装minio</h2><p> 在debian中我们使用wget来下载minio</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择minio安装位置</span><br><span class="line">cd /usr/local/apps/minio/local/</span><br><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br></pre></td></tr></table></figure><p>下载好minio之后我们还需要启动,这里使用的是脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"># author: hinhyugau@gmail.com</span><br><span class="line">export MINIO_ACCESS_KEY=username   #minio默认用户名</span><br><span class="line">export MINIO_SECRET_KEY=password  #minio默认密码</span><br><span class="line">nohup /usr/local/apps/minio/local/minio server /data/minio/data&#123;1...64&#125;(表示文件存储位置有1-64个) &gt; /usr/local/apps/minio/local/minio_start.log(日志) 2&gt;&amp;1 &amp;</span><br><span class="line">echo &#x27;finished&#x27;</span><br></pre></td></tr></table></figure><p>启动之后我们使用cat 命令查看是否启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat minio_start.log</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WARNING: MINIO_ACCESS_KEY and MINIO_SECRET_KEY are deprecated.</span><br><span class="line">         Please use MINIO_ROOT_USER and MINIO_ROOT_PASSWORD</span><br><span class="line">Verifying if 1 bucket is consistent across drives...</span><br><span class="line">Automatically configured API requests per node based on available memory on the system: 11</span><br><span class="line">Status:         64 Online, 0 Offline. </span><br><span class="line">API: http://172.26.3.125:9000  http://172.17.0.1:9000  http://127.0.0.1:9000           </span><br><span class="line"></span><br><span class="line">Console: http://172.26.3.125:40839 http://172.17.0.1:40839 http://127.0.0.1:40839      </span><br><span class="line"></span><br><span class="line">Documentation: https://docs.min.io</span><br><span class="line"></span><br><span class="line">WARNING: Console endpoint is listening on a dynamic port (40839), please use --console-address &quot;:PORT&quot; to choose a static port.</span><br></pre></td></tr></table></figure><p>日志参数解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由于我是下载的最新版本的minio和老版本的区别很大,老版本的minio启动之后web上访问或者后台调取图片都是使用的同一个默认9000端口,新版本的变更为访问控制台是访问控制台的端口,调取图片有调用的专用API端口,感觉这样的设计还是蛮不错的,这难道就是java中解耦XD</span><br><span class="line">API: 表示调用minio接口所访问的端口</span><br><span class="line">Console: 表示web页面所访问的端口</span><br></pre></td></tr></table></figure><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>minio现在已经启动好了那么我们需要nginx作为端口转发,不过https证书颁发太过简单就不絮叨了自行谷歌<br>默认debian已经安装完成nginx,那我们只需要打开nginx.conf配置文件进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    map $ssl_preread_server_name $backend_name &#123;</span><br><span class="line">        xx.xxx.app  vless; #zv.xx.yy更改为自己分流的域名</span><br><span class="line">        xxx.aaaa.app  http2; #zh.xx.yy更改为自己分流的域名</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream vless &#123; #vless与上对应</span><br><span class="line">        server 127.0.0.1:37443; #转给vless应用的本地监听端口</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream http2 &#123; #http2与上对应</span><br><span class="line">        server 127.0.0.1:9001; #转给http2应用的本地监听端口</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443; #IPv4,tcp 443监听端口。</span><br><span class="line">        listen [::]:443; #IPv6,tcp 443监听端口。无IPv6,此项可以删除。</span><br><span class="line">        ssl_preread on;</span><br><span class="line">        proxy_protocol off; #开启PROXY protocol发送（可选）。此参数是针对此监听端口开启（全局模式），即所有转发端口开启；故若有一个接收端不支持PROXY protocol，就不能启用！</span><br><span class="line">        proxy_pass $backend_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; #SNI分流配置到此结束</span><br><span class="line">#在如下http中添加对应网站的应用配置参数（可配置多个网站，必须与上对应。）</span><br><span class="line">http &#123;</span><br><span class="line">    client_max_body_size 20m;</span><br><span class="line">    client_body_buffer_size 128k;</span><br><span class="line">#.........&lt;省略&gt;........</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 127.0.0.1:9001 ssl http2; #http/2 server本地监听端口，并启用PROXY protocol接收（与上监听端口开启对应，否则删除此参数！）。</span><br><span class="line">        #set_real_ip_from 127.0.0.1; #上一项若启用了PROXY protocol接收，配置此参数；否则删除。</span><br><span class="line">        server_name vv.aaaa.app; #zh.xx.yy修改成自己的域名（与上对应）</span><br><span class="line"></span><br><span class="line">        ssl_certificate /etc/letsencrypt/live/www.aaa.app/fullchain.pem; #换成自己的证书，绝对路径。</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/www.aaa.app/privkey.pem; #换成自己的密钥，绝对路径。</span><br><span class="line"></span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3; #TLSv1.3需使用OpenSSl版本大于1.1.1编译才支持</span><br><span class="line">        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        </span><br><span class="line">        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot; always; #启用HSTS</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:40839; </span><br><span class="line">        #proxy_redirect on; </span><br><span class="line">        proxy_set_header Host $host; </span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">        proxy_read_timeout 3600s; </span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">        proxy_set_header Upgrade $http_upgrade; </span><br><span class="line">        #proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        &#125;</span><br><span class="line">        location /blog &#123;</span><br><span class="line">        proxy_pass http://172.26.3.125:9000;</span><br><span class="line">        #proxy_set_header Host $host;</span><br><span class="line">        #proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        #proxy_read_timeout 3600s;</span><br><span class="line">        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        #proxy_set_header  Upgrade $http_upgrade;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为需要多个https支持所以做了stream SNI分流设置,如果不需要分流只需要监听443然后使用proxy_pass转发到minio控制台窗口即可,最下面的localtion是对桶进行的端口转发</p><h2 id="minio设置"><a href="#minio设置" class="headerlink" title="minio设置"></a>minio设置</h2><p>我们来看下web页面上的minio控制台界面<br><img src="https://vv.oceanc.app/blog/minioCover.png" alt="blockchain" title="minio login image"><br>输入脚本中设置的minio账号密码登录进入控制台如下界面<br><img src="https://vv.oceanc.app/blog/minioDetail.png" alt="blockchain" title="minio detail image"><br>指示板展示了桶的个数以及文件个数使用空间以及所有空间<br>我们点击Bucket进入桶界面,然后点击右上角 create bucet添加一个桶<br>再为弹出的界面设置一个桶的名字点击save即可<br>点击创建的桶进入桶中点击右上角的设置按钮进入设置桶信息界面<br>在设置桶信息界面中点击左侧access rules进入桶规则界面,最后点击右上角的add access rule添加桶访问规则为prefix . access readwrite读写权限<br><img src="https://vv.oceanc.app/blog/minioBucketRules.png" alt="blockchain" title="minio bucket image"><br>通过上传图片进行访问如图<br><img src="https://vv.oceanc.app/blog/minioUrlImage1.png" alt="blockchain" title="minio url image"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>其实踩坑还是蛮多的,比如一开始的nginx413是因为超过了nginx的上传大小<br>还有一个就是stream进行端口转发的时候其实是开了三个接口,监听的接口被占用无法进行复用<br>不过大家搭建的站点还是都切换到https比较安全</p>]]></content>
      
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> debian </tag>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>how to install minio for debian and use https.md</title>
      <link href="/2021/09/17/how-to-install-minio-for-debian-and-use-https-md/"/>
      <url>/2021/09/17/how-to-install-minio-for-debian-and-use-https-md/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在debian系统中安装minio并使用https方式访问"><a href="#如何在debian系统中安装minio并使用https方式访问" class="headerlink" title="如何在debian系统中安装minio并使用https方式访问"></a>如何在debian系统中安装minio并使用https方式访问</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  以前搭建过的minio都是使用<a href="http://domain/">http://domain</a> name(ip):port/bucket/image name.xx访问,这种方式正常使用是没有问题的在网站中,但是http的协议的图片在https网站中引用在google Chrome浏览器中会有安全策略问题,https网站不允许调用http协议中的请求,如果想要调用需要在域名地址输入框的小🔒位置点击选择网站设定,在新开的设定页面找到不安全的内容更改为允许,但是这样的话原本的网站https也会降级为http,这样网站就会变的不安全,所以思前想后(因为穷)还是自己搭建一个minio的https服务,下面来食用吧</p><h2 id="下载安装minio"><a href="#下载安装minio" class="headerlink" title="下载安装minio"></a>下载安装minio</h2><p> 在debian中我们使用wget来下载minio</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择minio安装位置</span><br><span class="line">cd /usr/local/apps/minio/local/</span><br><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br></pre></td></tr></table></figure><p>下载好minio之后我们还需要启动,这里使用的是脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"># author: hinhyugau@gmail.com</span><br><span class="line">export MINIO_ACCESS_KEY=username   #minio默认用户名</span><br><span class="line">export MINIO_SECRET_KEY=password  #minio默认密码</span><br><span class="line">nohup /usr/local/apps/minio/local/minio server /data/minio/data&#123;1...64&#125;(表示文件存储位置有1-64个) &gt; /usr/local/apps/minio/local/minio_start.log(日志) 2&gt;&amp;1 &amp;</span><br><span class="line">echo &#x27;finished&#x27;</span><br></pre></td></tr></table></figure><p>启动之后我们使用cat 命令查看是否启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat minio_start.log</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WARNING: MINIO_ACCESS_KEY and MINIO_SECRET_KEY are deprecated.</span><br><span class="line">         Please use MINIO_ROOT_USER and MINIO_ROOT_PASSWORD</span><br><span class="line">Verifying if 1 bucket is consistent across drives...</span><br><span class="line">Automatically configured API requests per node based on available memory on the system: 11</span><br><span class="line">Status:         64 Online, 0 Offline. </span><br><span class="line">API: http://172.26.3.125:9000  http://172.17.0.1:9000  http://127.0.0.1:9000           </span><br><span class="line"></span><br><span class="line">Console: http://172.26.3.125:40839 http://172.17.0.1:40839 http://127.0.0.1:40839      </span><br><span class="line"></span><br><span class="line">Documentation: https://docs.min.io</span><br><span class="line"></span><br><span class="line">WARNING: Console endpoint is listening on a dynamic port (40839), please use --console-address &quot;:PORT&quot; to choose a static port.</span><br></pre></td></tr></table></figure><p>日志参数解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由于我是下载的最新版本的minio和老版本的区别很大,老版本的minio启动之后web上访问或者后台调取图片都是使用的同一个默认9000端口,新版本的变更为访问控制台是访问控制台的端口,调取图片有调用的专用API端口,感觉这样的设计还是蛮不错的,这难道就是java中解耦XD</span><br><span class="line">API: 表示调用minio接口所访问的端口</span><br><span class="line">Console: 表示web页面所访问的端口</span><br></pre></td></tr></table></figure><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>minio现在已经启动好了那么我们需要nginx作为端口转发,不过https证书颁发太过简单就不絮叨了自行谷歌<br>默认debian已经安装完成nginx,那我们只需要打开nginx.conf配置文件进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    map $ssl_preread_server_name $backend_name &#123;</span><br><span class="line">        xx.xxx.app  vless; #zv.xx.yy更改为自己分流的域名</span><br><span class="line">        xxx.aaaa.app  http2; #zh.xx.yy更改为自己分流的域名</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream vless &#123; #vless与上对应</span><br><span class="line">        server 127.0.0.1:37443; #转给vless应用的本地监听端口</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream http2 &#123; #http2与上对应</span><br><span class="line">        server 127.0.0.1:9001; #转给http2应用的本地监听端口</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443; #IPv4,tcp 443监听端口。</span><br><span class="line">        listen [::]:443; #IPv6,tcp 443监听端口。无IPv6,此项可以删除。</span><br><span class="line">        ssl_preread on;</span><br><span class="line">        proxy_protocol off; #开启PROXY protocol发送（可选）。此参数是针对此监听端口开启（全局模式），即所有转发端口开启；故若有一个接收端不支持PROXY protocol，就不能启用！</span><br><span class="line">        proxy_pass $backend_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; #SNI分流配置到此结束</span><br><span class="line">#在如下http中添加对应网站的应用配置参数（可配置多个网站，必须与上对应。）</span><br><span class="line">http &#123;</span><br><span class="line">    client_max_body_size 20m;</span><br><span class="line">    client_body_buffer_size 128k;</span><br><span class="line">#.........&lt;省略&gt;........</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 127.0.0.1:9001 ssl http2; #http/2 server本地监听端口，并启用PROXY protocol接收（与上监听端口开启对应，否则删除此参数！）。</span><br><span class="line">        #set_real_ip_from 127.0.0.1; #上一项若启用了PROXY protocol接收，配置此参数；否则删除。</span><br><span class="line">        server_name vv.aaaa.app; #zh.xx.yy修改成自己的域名（与上对应）</span><br><span class="line"></span><br><span class="line">        ssl_certificate /etc/letsencrypt/live/www.aaa.app/fullchain.pem; #换成自己的证书，绝对路径。</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/www.aaa.app/privkey.pem; #换成自己的密钥，绝对路径。</span><br><span class="line"></span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3; #TLSv1.3需使用OpenSSl版本大于1.1.1编译才支持</span><br><span class="line">        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        </span><br><span class="line">        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot; always; #启用HSTS</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:40839; </span><br><span class="line">        #proxy_redirect on; </span><br><span class="line">        proxy_set_header Host $host; </span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">        proxy_read_timeout 3600s; </span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">        proxy_set_header Upgrade $http_upgrade; </span><br><span class="line">        #proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        &#125;</span><br><span class="line">        location /blog &#123;</span><br><span class="line">        proxy_pass http://172.26.3.125:9000;</span><br><span class="line">        #proxy_set_header Host $host;</span><br><span class="line">        #proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        #proxy_read_timeout 3600s;</span><br><span class="line">        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        #proxy_set_header  Upgrade $http_upgrade;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为需要多个https支持所以做了stream SNI分流设置,如果不需要分流只需要监听443然后使用proxy_pass转发到minio控制台窗口即可,最下面的localtion是对桶进行的端口转发</p><h2 id="minio设置"><a href="#minio设置" class="headerlink" title="minio设置"></a>minio设置</h2><p>我们来看下web页面上的minio控制台界面<br><img src="https://vv.oceanc.app/blog/minioCover.png" alt="blockchain" title="minio login image"><br>输入脚本中设置的minio账号密码登录进入控制台如下界面<br><img src="https://vv.oceanc.app/blog/minioDetail.png" alt="blockchain" title="minio detail image"><br>指示板展示了桶的个数以及文件个数使用空间以及所有空间<br>我们点击Bucket进入桶界面,然后点击右上角 create bucet添加一个桶<br>再为弹出的界面设置一个桶的名字点击save即可<br>点击创建的桶进入桶中点击右上角的设置按钮进入设置桶信息界面<br>在设置桶信息界面中点击左侧access rules进入桶规则界面,最后点击右上角的add access rule添加桶访问规则为prefix . access readwrite读写权限<br><img src="https://vv.oceanc.app/blog/minioBucketRules.png" alt="blockchain" title="minio bucket image"><br>通过上传图片进行访问如图<br><img src="https://vv.oceanc.app/blog/minioUrlImage1.png" alt="blockchain" title="minio url image"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>其实踩坑还是蛮多的,比如一开始的nginx413是因为超过了nginx的上传大小<br>还有一个就是stream进行端口转发的时候其实是开了三个接口,监听的接口被占用无法进行复用<br>不过大家搭建的站点还是都切换到https比较安全</p>]]></content>
      
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> debian </tag>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
